<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        ">

   
    <!-- 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
    <context:property-placeholder location="classpath:db.properties" />
    
    <!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  <!--这里是重点:需要把dataSource属性指定到自定义的multipleDataSource-->
	  <property name="dataSource">
            <ref bean="dataSource1" />
        </property>
	  <!-- 自动扫描me/gacl/mapping/目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置
	  value="classpath:me/gacl/mapping/*.xml"指的是classpath(类路径)下me.gacl.mapping包中的所有xml文件
	  UserMapper.xml位于me.gacl.mapping包下，这样UserMapper.xml就可以被自动扫描
	   -->
	  <property name="mapperLocations" value="classpath:mybatis-mapping/*.xml" />
	</bean>

	 
    <!-- DataSource1 -->
    <!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->
	<bean name="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	  <property name="url" value="${jdbc.url1}" />
	  <property name="username" value="${jdbc.user1}" />
	  <property name="password" value="${jdbc.pass1}" />
	  <!-- 初始化连接大小 -->
	  <property name="initialSize" value="0" />
	  <!-- 连接池最大使用连接数量 -->
	  <property name="maxActive" value="20" />
	  <!-- 连接池最大空闲 -->
	  <property name="maxIdle" value="20" />
	  <!-- 连接池最小空闲 -->
	  <property name="minIdle" value="0" />
	  <!-- 获取连接最大等待时间 -->
	  <property name="maxWait" value="60000" />
	  <!-- 
	  <property name="poolPreparedStatements" value="true" /> 
	  <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> 
	  -->
	  <property name="validationQuery" value="${jdbc.validationQuery}" />
	  <property name="testOnBorrow" value="false" />
	  <property name="testOnReturn" value="false" />
	  <property name="testWhileIdle" value="true" />
	  <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	  <property name="timeBetweenEvictionRunsMillis" value="60000" />
	  <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	  <property name="minEvictableIdleTimeMillis" value="25200000" />
	  <!-- 打开removeAbandoned功能 -->
	  <property name="removeAbandoned" value="true" />
	  <!-- 1800秒，也就是30分钟 -->
	  <property name="removeAbandonedTimeout" value="1800" />
	  <!-- 关闭abanded连接时输出错误日志 -->
	  <property name="logAbandoned" value="true" />
	  <!-- 监控数据库 -->
	  <!-- <property name="filters" value="stat" /> -->
	  <property name="filters" value="mergeStat" />
	</bean>

   
    <!-- 配置sqlsession 产生这个实例就是通过 sqlsessionTemplate来实现的 -->    
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	    <constructor-arg index="0">
	    <ref  bean="sqlSessionFactory"/>
	    </constructor-arg>
    </bean>
    
    <!-- 业务类 的配置 -->
    <!-- <bean id="userService"  class="szb2.api.service.UserService">
	    <property name="sqlSession">
	    	<ref bean="sqlSession"/>
	    </property>
    </bean> -->
    
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 <!-- 扫描me.gacl.dao这个包以及它的子包下的所有映射接口类 -->
	  <property name="basePackage" value="com.xmg.touna.dao.mappers" />
	  <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
   
  
    
    <!-- 配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
	  <property name="patterns">
	    <list>
	      <value>org.navy.service.*</value>
	    </list>
	  </property>
	</bean>
	<aop:config>
	  <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>    
</beans>